#include <stdio.h> 

int main() { 
    int n; 
    int bt[100], at[100], ct[100], tat[100], wt[100], rt[100]; 
    int total_wt = 0, total_tat = 0; 
    
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
    
    printf("Enter the burst time for each process:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d: ", i + 1); 
        scanf("%d", &bt[i]); 
    } 
    
    printf("Enter the arrival time for each process:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d: ", i + 1); 
        scanf("%d", &at[i]); 
    } 
    
    int currentTime = 0; 
    for (int i = 0; i < n; i++) { 
        if (currentTime < at[i]) { 
            currentTime = at[i]; 
        } 
        ct[i] = currentTime + bt[i]; 
        tat[i] = ct[i] - at[i]; 
        wt[i] = tat[i] - bt[i]; 
        rt[i] = wt[i]; 
        currentTime = ct[i]; 
        total_wt += wt[i]; 
        total_tat += tat[i]; 
    } 
    
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\tResponse Time\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
               i + 1, at[i], bt[i], ct[i], tat[i], wt[i], rt[i]); 
    } 
    
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n); 
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n); 
    
    return 0; 
}  

OUTPUT:
Enter the number of processes: 5
Enter the burst time for each process:
P1: 6
P2: 7
P3: 8
P4: 2
P5: 1
Enter the arrival time for each process:
P1: 1
P2: 2
P3: 3
P4: 4
P5: 5

Process	Arrival Time	Burst Time	Completion Time	Turnaround Time	Waiting Time	Response Time
P1	1		6		7		6		0		0
P2	2		7		14		12		5		5
P3	3		8		22		19		11		11
P4	4		2		24		20		18		18
P5	5		1		25		20		19		19

Average Waiting Time: 10.60
Average Turnaround Time: 15.40

SJF

#include <stdio.h> 
#include <stdbool.h> 
int main() { 
    int n; 
    printf("Enter number of processes: "); 
    scanf("%d", &n); 
    int at[n],bt[n],rt[n],st[n],ft[n],tat[n],wt[n]; 
    printf("Enter Arrival Times:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d: ", i + 1); 
        scanf("%d", &at[i]); 
    } 
    printf("Enter Burst Times:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d: ", i + 1); 
        scanf("%d", &bt[i]); 
        rt[i] = bt[i]; 
    } 
    int ct = 0; 
    int completed = 0; 
    double total_wt = 0, total_tat = 0; 
    while (completed < n) { 
        int idx = -1; 
        int min_time = 1e9; 
        for (int i = 0; i < n; i++) { 
            if (at[i] <= ct && rt[i] > 0 && rt[i] < min_time) { 
                min_time = rt[i]; 
                idx = i; 
            } 
        } 
        if (idx != -1) { 
            rt[idx]--; 
            ct++; 
            if (rt[idx] == 0) { 
                completed++; 
                ft[idx] = ct; 
                tat[idx] = ft[idx] - at[idx]; 
                wt[idx] = tat[idx] - bt[idx]; 
                total_wt += wt[idx]; 
                total_tat += tat[idx]; 
            } 
        } else { 
            ct++; 
        } 
    } 
    double avgwt = total_wt / n; 
    double avgtat = total_tat / n; 
    printf("\nProcess\tArrival Time\tBurst Time\tFinish Time\tTurnaround Time\tWaiting Time\n"); 
    for (int i = 0; i < n; i++) { 
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], ft[i], tat[i], wt[i]); 
    } 
    printf("\nAverage Waiting Time: %.2f\n", avgwt); 
    printf("Average Turnaround Time: %.2f\n", avgtat); 
    return 0; 
}

OUTPUT:
Enter number of processes: 4
Enter Arrival Times:
P1: 0
P2: 2
P3: 4
P4: 5
Enter Burst Times:
P1: 7
P2: 4
P3: 1
P4: 4

Process	Arrival Time	Burst Time	Finish Time	Turnaround Time	Waiting Time
P1	0		7		16		16		9
P2	2		4		7		5		1
P3	4		1		5		1		0
P4	5		4		11		6		2

Average Waiting Time: 3.00
Average Turnaround Time: 7.00


PRIORITY

#include<stdio.h> 
struct process 
{ 
int wt,at,bt,tat,pt; 
}; 
struct process a[10]; 
int main() 
{ 
int n,temp[10],t,count=0,short_p,i; 
float total_wt=0,total_tat=0,avg_wt,avg_tat; 
printf("enter the process:"); 
scanf("%d",&n); 
printf("enter the at,bt,priority"); 
for(i=0;i<n;i++) 
{ 
scanf("%d%d%d",&a[i].at,&a[i].bt,&a[i].pt); 
temp[i]=a[i].bt; 
} 
a[9].pt=10000; 
for(t=0;count!=n;t++) 
{ 
short_p=9; 
for(i=0;i<n;i++) 
{ 
if(a[short_p].pt>a[i].at<=t&&a[i].bt>0) 
{ 
short_p=i; 
} 
} 
a[short_p].bt=a[short_p].bt-1; 
if(a[short_p].bt==0) 
{ 
count++; 
a[short_p].wt=t+1-a[short_p].at-temp[short_p]; 
a[short_p].tat=t+1-a[short_p].at; 
total_wt=total_wt+a[short_p].wt; 
total_tat=total_tat+a[short_p].tat; 
} 
} 
avg_wt=total_wt/n; 
avg_tat=total_tat/n; 
printf("ID\twt\ttat\n"); 
for(i=0;i<n;i++) 
{ 
printf("%d\t%d\t%d\n",i+1,a[i].wt,a[i].tat); 
} 
printf("avg waiting time is %f\n",avg_wt); 
printf("avg turn around time is %f\n",avg_tat);
}

output:

enter the process:4
enter the at,bt,priority3 4 5
1 2 3
4 5 6
7 8 9
ID	wt	tat
1	13	17
2	13	15
3	5	10
4	-6	2
avg waiting time is 6.250000
avg turn around time is 11.000000

ROUND ROBIN

#include <stdio.h> 
#include <stdlib.h> 
 
#define MAX_PROCESSES 10 
 
void main() { 
    int i, n, t, m = 0, s = 0; 
    int bur[MAX_PROCESSES], bur1[MAX_PROCESSES]; 
    int b[MAX_PROCESSES], p[MAX_PROCESSES], k[MAX_PROCESSES]; 
    int wat[MAX_PROCESSES], tur[MAX_PROCESSES]; 
    int a[2 * MAX_PROCESSES + 1]; 
    float atur, awat; 
    int ttur = 0, twat = 0; 
    int x = -1, j = 0; 
 
    printf("Enter number of processes (max %d): ", MAX_PROCESSES); 
    scanf("%d", &n); 
    if (n > MAX_PROCESSES) { 
        printf("Error: Maximum number of processes is %d\n", MAX_PROCESSES); 
        exit(1); 
    } 
 
    for (i = 0; i < n; i++) { 
        printf("Burst time for process p%d: ", i + 1); 
        scanf("%d", &bur[i]); 
        bur1[i] = bur[i]; 
    } 
 
    printf("Enter the time slice: "); 
    scanf("%d", &t); 
 
    for (i = 0; i < n; i++) { 
        b[i] = bur[i] / t; 
        if (bur[i] % t != 0) 
            b[i]++; 
        m += b[i]; 
    } 
 
    printf("\n\t\tRound Robin Scheduling\n"); 
    printf("Gantt Chart:\n"); 
    for (i = 0; i < m; i++) 
        printf("--------"); 
    printf("\n"); 
    a[0] = 0; 
 
    while (j < m) { 
        if (x == n - 1) 
            x = 0; 
        else 
            x++; 
 
        if (bur[x] > 0) { 
            int time = bur[x] > t ? t : bur[x]; 
            bur[x] -= time; 
 
            a[j + 1] = a[j] + time; 
            if (bur[x] == 0) { 
                p[s] = x; 
                k[s] = a[j + 1]; 
                s++; 
            } 
            j++; 
            printf("p%d |", x + 1); 
        } 
    } 
 
    printf("\n"); 
    for (i = 0; i < m; i++) 
        printf("--------"); 
    printf("\n"); 
    for (j = 0; j <= m; j++) 
        printf("%d\t", a[j]); 
 
    for (i = 0; i < n - 1; i++) { 
        for (j = i + 1; j < n; j++) { 
            if (p[i] > p[j]) { 
                int temp = p[i]; 
                p[i] = p[j]; 
                p[j] = temp; 
                temp = k[i]; 
                k[i] = k[j]; 
                k[j] = temp; 
            } 
        } 
    } 
 
    for (i = 0; i < n; i++) { 
        tur[i] = k[i] - bur1[i]; 
        wat[i] = tur[i] - bur1[i]; 
    } 
 
    for (i = 0; i < n; i++) { 
        ttur += tur[i]; 
        twat += wat[i]; 
    } 
 
    awat = (float)twat / n; 
    atur = (float)ttur / n; 
 
    printf("\n\n"); 
    for (i = 0; i < 28; i++) 
        printf("-"); 
    printf("\nProcess\tBurst\tTurnaround\tWait\n"); 
    for (i = 0; i < 28; i++) 
        printf("-"); 
    printf("\n"); 
    for (i = 0; i < n; i++) 
        printf("p%-4d\t%4d\t%4d\t\t%4d\n", p[i] + 1, bur1[i], tur[i], wat[i]); 
 
    for (i = 0; i < 28; i++) 
        printf("-"); 
    printf("\n\nAverage waiting time: %.2f ms", awat); 
    printf("\nAverage turnaround time: %.2f ms\n", atur); 
}

OUTPUT:
Enter number of processes (max 10): 4
Burst time for process p1: 4
Burst time for process p2: 5
Burst time for process p3: 2
Burst time for process p4: 3
Enter the time slice: 2

		Round Robin Scheduling
Gantt Chart:
----------------------------------------------------------------
p1 |p2 |p3 |p4 |p1 |p2 |p4 |p2 |
----------------------------------------------------------------
0	2	4	6	8	10	12	13	14	

----------------------------
Process	Burst	Turnaround	Wait
----------------------------
p1   	   4	   6		   2
p2   	   5	   9		   4
p3   	   2	   4		   2
p4   	   3	  10		   7
----------------------------

Average waiting time: 3.75 ms
Average turnaround time: 7.25 ms




