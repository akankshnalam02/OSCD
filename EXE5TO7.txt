EXE 5 BANKERS PROBLEM
#include <stdio.h>

int main() {
    int n = 5; // Number of processes
    int m = 3; // Number of resources

    // Allocation Matrix
    int alloc[5][3] = { { 0, 1, 0 }, // P0
                        { 2, 0, 0 }, // P1
                        { 3, 0, 2 }, // P2
                        { 2, 1, 1 }, // P3
                        { 0, 0, 2 } }; // P4

    // Maximum Resource Matrix
    int max[5][3] = { { 7, 5, 3 }, // P0
                      { 3, 2, 2 }, // P1
                      { 9, 0, 2 }, // P2
                      { 2, 2, 2 }, // P3
                      { 4, 3, 3 } }; // P4

    int avail[3] = { 3, 3, 2 }; // Available Resources

    int f[n], ans[n], ind = 0;
    for (int k = 0; k < n; k++) {
        f[k] = 0;  // Initially no process is finished
    }

    // Calculate the Need matrix
    int need[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Banker's Algorithm
    int process_done;
    for (int k = 0; k < n; k++) {
        process_done = 0;
        for (int i = 0; i < n; i++) {
            if (f[i] == 0) {  // Process is not yet finished
                int can_allocate = 1;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        can_allocate = 0;
                        break;
                    }
                }

                // If resources can be allocated to this process
                if (can_allocate) {
                    for (int y = 0; y < m; y++) {
                        avail[y] += alloc[i][y];
                    }
                    ans[ind++] = i;
                    f[i] = 1;
                    process_done = 1;
                }
            }
        }
        if (!process_done) break;
    }

    // Check if all processes are finished
    int safe = 1;
    for (int i = 0; i < n; i++) {
        if (f[i] == 0) {
            safe = 0;
            printf("The system is not in a safe state.\n");
            break;
        }
    }
    if (safe) {
        printf("Following is the SAFE Sequence:\n");
        for (int i = 0; i < n - 1; i++) {
            printf(" P%d ->", ans[i]);
        }
        printf(" P%d\n", ans[n - 1]);
    }

    return 0;
}



EXERCISE 6

 #include<stdio.h> 
#include<string.h> 
int main(){ 
char array[20]; 
    printf("Enter the input string aa*bb*:"); 
    scanf("%s", array); 
  
    int state = 0; 
    int i = 0; 
 
    if (array[i] == 'a') { 
        state = 1; 
    } else { 
        state = -1;   
    } 
    
    if (state != -1) { 
        for (i = 1; i < strlen(array); i++) { 
            
            if (array[i] != 'a' && array[i] != 'b') { 
                state = -1;   
                break;   
            } 
            
            if (state == 1) { 
                if (array[i] == 'a') { 
                    state = 1;   
                } else { 
                    if (array[i] == 'b') { 
                        state = 2;   
                    } else { 
                        state = -1;   
                        break;   
                    } 
                } 
            } else if (state == 2) { 
                if (array[i] == 'b') { 
                    state = 2;   
                } else { 
                    state = -1;   
                    break;   
                } 
            } 
        } 
    } 
    
    if (state == 2 && i == strlen(array)) { 
        printf("string accepted"); 
    } else { 
        printf("string not accepted"); 
    } 
    return 0; 
} 
OUTPUT:
Enter the input string aa*bb*:aabbbbb
string accepted


EXE 7

#include <stdio.h>
#include <string.h>

int main() {
    char input[30];
    int j = 0;
    printf("Enter string ((0+1)*00): ");
    scanf("%s", input);

    int c = 0, state = 0;

    // Check for minimum length (must be at least 2 characters)
    if (strlen(input) < 2) {
        printf("String not accepted\n");
    } else {
        // Check if all characters are either '0' or '1'
        for (j = 0; j < strlen(input); j++) {
            if (input[j] == '0' || input[j] == '1') {
                c = c + 1;
            }
        }

        if (c == strlen(input)) { // All characters are valid (0 or 1)
            // Check if the last two characters are '0'
            if (input[strlen(input) - 1] == '0' && input[strlen(input) - 2] == '0') {
                state = 2;
            } else {
                state = -1;
            }

            if (state == 2) {
                printf("String accepted\n");
            } else {
                printf("String not accepted\n");
            }
        } else {
            printf("String not accepted\n");
        }
    }

    return 0;
}
OUTPUT:
Enter string ((0+1)*00): 10100
String accepted


