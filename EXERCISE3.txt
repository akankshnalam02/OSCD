#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <sys/shm.h> 
#include <sys/types.h> 
#include <unistd.h> 
#include <sys/wait.h> 
 
#define SHM_SIZE 1024  // Size of the shared memory segment 
 
int main() { 
    key_t key = ftok("shmfile", 65);  // Generate a unique key 
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);  // Create shared memory segment 
    
    if (shmid == -1) { 
        perror("shmget failed"); 
        exit(1); 
    } 
 
    pid_t pid = fork();  // Create a new process 
 
    if (pid < 0) { 
        perror("fork failed"); 
        exit(1); 
    } 
 
    if (pid == 0) { 
        // Child process 
        char *shm_addr = (char*) shmat(shmid, NULL, 0);  // Attach shared memory 
        
        if (shm_addr == (char*) -1) { 
            perror("shmat failed"); 
            exit(1); 
        } 
        
        printf("Child process reading data from shared memory: %s\n", shm_addr); 
 
        shmdt(shm_addr);  // Detach shared memory 
 
        exit(0); 
    } else { 
        // Parent process 
        char *shm_addr = (char*) shmat(shmid, NULL, 0);  // Attach shared memory 
 
        if (shm_addr == (char*) -1) { 
            perror("shmat failed"); 
            exit(1); 
        } 
 
        printf("Parent process writing to shared memory.\n"); 
        const char *message = "Hello from parent process!"; 
        strncpy(shm_addr, message, SHM_SIZE);  // Write to shared memory 
        
        wait(NULL);  // Wait for child to finish 
        
        shmdt(shm_addr);  // Detach shared memory 
        shmctl(shmid, IPC_RMID, NULL);  // Remove shared memory segment 
 
        printf("Parent process removed shared memory segment.\n"); 
    } 
 
    return 0; 
} 
OUTPUT:
Parent process writing to shared memory.
Child process reading data from shared memory: Hello from parent process!
Parent process removed shared memory segment.